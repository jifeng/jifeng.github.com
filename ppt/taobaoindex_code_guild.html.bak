<!DOCTYPE html>
<!--[if lt IE 7]> <html class="no-js ie6" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->  <html class="no-js" lang="en"> <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  

  <title> 淘宝指数的开发规范  </title>  
  <meta name="description" content="A jQuery library for modern HTML presentations">
  <meta name="author" content="Caleb Troughton">
  <meta name="viewport" content="width=1024, user-scalable=no">
  
  <!-- Core and extension CSS files -->
  <link rel="stylesheet" href="/js/deck.js/core/deck.core.css">
  <link rel="stylesheet" href="/js/deck.js/extensions/goto/deck.goto.css">
  <link rel="stylesheet" href="/js/deck.js/extensions/menu/deck.menu.css">
  <link rel="stylesheet" href="/js/deck.js/extensions/navigation/deck.navigation.css">
  <link rel="stylesheet" href="/js/deck.js/extensions/status/deck.status.css">
  <link rel="stylesheet" href="/js/deck.js/extensions/hash/deck.hash.css">
  
  <!-- Theme CSS files (menu swaps these out) -->
  <link rel="stylesheet" id="style-theme-link" href="/js/deck.js/themes/style/neon.css">
  <link rel="stylesheet" id="transition-theme-link" href="/js/deck.js/themes/transition/horizontal-slide.css">
  
  <!-- Custom CSS just for this page -->
  <link rel="stylesheet" href="/css/prettify.css">
  
  <script src="/js/deck.js/modernizr.custom.js"></script>
</head>

<body class="deck-container">


<section class="slide"><h1> 淘宝指数的开发规范 </h1>


</section>

<section class="slide">
<h2>大纲</h2>

<ul>
<li>编码规范</li>
<li>代码审核</li>
<li>单元测试</li>

</ul>

</section>

<section class="slide">
<h2>编码规范</h2>
<p><img src="http://ww3.sinaimg.cn/large/7013266egw1dreu8elroaj.jpg" alt="code style" title="" /></p>
<p><a href="https://github.com/windyrobin/iFrame/blob/master/style.md">Javascript编码规范</a></p>
<p><a href="https://github.com/windyrobin/iFrame/blob/master/pp.md">Javascript 陷阱/性能优化/习惯用法</a></p>
</section>

<section class="slide">
<h2>代码审核——提交流程</h2>

<h3>1. 变更代码必须要被审查后才能提交</h3>

<h3>2. 开发者发布审查请求时需要填写代码变更<br>
    的描述和原因，如果有测试结果，也必须要填写 </h3>

<h3>3. 只有审查人确认"Ship it"后，<br>开发者才能提交代码 </h3>

<h3>4. Commit log 必须包含代码变更描述和代码审查URL (svn)</h3>

<p><a href="http://baike.corp.taobao.com/index.php/Code-review-edp">具体使用说明</a></p>
</section>

<section class="slide">
<h2>代码审核——审查内容</h2>
<h3>1.  编码规范</h3>
<h3>2.  是否符合描述说明</h3>
<h3>3.  变更代码必须有对应的单元测试覆盖到</h3>
<p>* 输入参数覆盖</p>
<p>*  正常逻辑覆盖 </p>
<p>*  异常逻辑覆盖 </p>
<h3>4. 程序逻辑 </h3>

<p><a href="http://baike.corp.taobao.com/index.php/Code-review-edp">具体使用说明</a></p>
</section>


<section class="slide">
<h2>代码审核——作用</h2>
<h3>1.  对开发者：</h3>
<p>* 保证代码规范</p>
<p>* 查漏补缺 </p>
<p>* 提高代码质量</p>
<h3>2.  对审核者：</h3>
<p>* 把控程序的功能点</p>
<p>* 学习别人代码的优点</p>

</section>
<section class="slide">
<h2>单元测试——作用</h2>

<h3>代码质量</h3>

<p>代码质量如何度量？<br />如果没有测试你如何保证你的代码质量？</p>

<h3>敏捷快速地适应需求</h3>

<p>单元测试是否也能让产品经理看得懂？<br />单元测试是否也能成功一个产品需求的Case？</p>

<h3>重构</h3>

<p>你有足够信心在没有单元测试的情况下发布你的重构代码吗？<br />如何检测你重构的代码符合需要？</p>

<h3>增强自信心</h3>

<p>全是绿灯！<br />单元测试全部跑通！</p>
<h3>鹦鹉螺</h3>

<p>去QA</p>

</section>

</section>

<section class="slide">
<h2>单元测试——工具</h2>
<h3>mocha + should + jscoverage</h3>

<h3>好的示例</h3>
<ul>
<li><a href="https://github.com/visionmedia/express/tree/master/test">Express</a></li>
<li><a href="https://github.com/senchalabs/connect/tree/master/test">Connect</a></li>
<li><a href="https://github.com/visionmedia/superagent/tree/master/test/node">SuperAgent</a></li>
<li><a href="https://github.com/LearnBoost/websocket.io/tree/master/test">WebSocket.io</a></li>
<li><a href="https://github.com/visionmedia/mocha/tree/master/test">Mocha</a></li>
</ul>
</section>

<section class="slide">
<h2>单元测试</h2>
<h3>项目结构</h3>
<p><img src="http://ww4.sinaimg.cn/large/7013266egw1dreut6owo2j.jpg" alt="program Features" title="" /></p>

<ul>
<li>ensure_require: 用于jsconverage时，省掉每个文件的埋点</li>
<li>http：非常方便地测试 http 请求</li>
<li>mock：模拟请求得到的数据，用户处理数据异常</li>
</ul>

</section>

<section class="slide">
<h2>单元测试</h2>
<h3>Makefile</h3>
<pre><code>NAME = taobaoindex
SRC = $(shell find lib -type f -name "*.js")
TESTS = test/*.js
TESTTIMEOUT = 15000
REPORTER = tap
VERSION = $(shell date +%Y%m%d%H%M%S)
SVNURL = $(shell svn info | grep URL | awk '{print $$2}')

test: compile
	@NODE_ENV=test ./node_modules/mocha/bin/mocha \
		--reporter $(REPORTER) --timeout $(TESTTIMEOUT) $(TESTS)
test-cov:
	@JSCOV=1 $(MAKE) test REPORTER=html-cov > coverage.html

test-cov-json:
	@JSCOV=1 $(MAKE) test REPORTER=json-cov
	......
</code></pre>

</section>

<section class="slide">
<h2>单元测试——小技巧</h2>
<h3>模拟请求得到的数据</h3>
<pre><code> 
var searchApp = require('../controllers/search');
var app = require('../app').create();
var should = require('should');  
  before(function(done) {
    app.listen(0, done);
  });
    describe('/cpv_items', function() {
    var urls = [
      '/cpv_items/50010850/20511,28386;20664,28105;2917619,8496965?query=%E8%BF%9E%E8%A1%A3%E8%A3%99&cid=50010850&hot=63426&title=%E8%95%BE%E4%B8%9D%20%E8%95%BE%E4%B8%9D%E8%8A%B1%E8%BE%B9%20%E9%9F%A9%E7%89%88&datatype=cpv',
      '/cpv_items/50019272/20000,47342;3775809,20144;7221242,4526599?query=%E7%99%BB%E5%B1%B1%E9%9E%8B&cid=50019272&hot=13451&title=%E7%94%B7%E5%A3%AB%20Camel%2F%E9%AA%86%E9%A9%BC%20%E8%80%90%E7%A3%A8&datatype=cpv',
    ];
    urls.forEach(function(url) {
      it(url.substring(0, 30) + '... should return json format', function(done) {
        app.request().get(url).end(function(res) {
          res.should.have.status(200);
          res.should.have.header('content-type', 'application/json; charset=utf-8');
          var items = JSON.parse(res.body);
          items.should.be.an.instanceof(Array);
          items.length.should.above(0);
          for (var j = 0, jl = items.length; j < jl; j++) {
            checkImageItem(items[j]);
          }
          done();
        });
      })
    });
    
  });
	......
</code></pre>
<p><a href="http://svn.simba.taobao.com/svn/EDP/taobaoindex/taobaoindex/trunk/test/support/http.js">http模拟代码</a></p>
</section>

<section class="slide">
<h2>单元测试——小技巧</h2>
<h3>模拟http请求</h3>
<pre><code> 
function mockDataRenderError() {
  var _request = urllib.request;
  before(function() {
    urllib.request = function() {
      var cb = arguments[arguments.length - 1];
      process.nextTick(function() {
        cb(null, new Buffer('{"v": "3.0","c": 200,"m": "数据渲染错误","t": 0,"n": 0,"fn": 0}'));
      });
    };
  });
  after(function() {
    urllib.request = _request;
  });
  return function(err, data, done) {
    should.exist(err);
    err.should.be.an.instanceof(Error);
    err.message.should.equal('数据渲染错误');
    err.data.should.equal('{"v": "3.0","c": 200,"m": "数据渲染错误","t": 0,"n": 0,"fn": 0}');
    should.not.exist(data);
    done();
  };
}
	......
</code></pre>

</section>
<section class="slide">
<h2>单元测试</h2>
<p><img src="http://ww4.sinaimg.cn/large/7013266egw1drev57wf27j.jpg" alt="result" title="" /></p>
<p>看见单元测试全部跑过是件很爽的事情</p>
</section>

<section class="slide">
<h2>Mocha 强大的特性列表</h2>

<ul>
<li>browser support | 浏览器支持</li>
<li>simple async support | 非常简单自然地支持异步方式</li>
<li>maps uncaught exceptions to the correct test case | 将未捕获异常对应到正确的测试用例</li>
<li>test-specific timeouts | 能指定具体测试超时时间</li>
<li>reports test durations | 测试时间报告</li>
<li>highlights slow tests | 慢测试高亮显示</li>
<li>use any assertion library you want | 使用任意你想使用的断言库</li>
<li>extensible reporting, bundled with 9+ reporters | 可扩展的报告，并默认自动9中报告格式</li>
<li>before, after, before each, after each hooks | 各种想当然的钩子方法</li>
<li>......</li>
</ul>

</section>

<section class="slide">
<h2>should.js 我应该</h2>

<p>我承认，我是@TJ 忠实粉丝...<br />还有，我喜欢 should 的方式:</p>

<ul>
<li>代码写起来有意思</li>
<li>让懂英文的产品经理能基本看懂测试用例</li>
</ul>

</section>

<section class="slide">
<h1>A cup of <code>Mocha</code>, <br/>test cases <code>should</code> pass.</h1>

</section>

<section class="slide">
<h2>实战短址还原的单元测试</h2>

<p>短址还原: <a href="https://github.com/fengmk2/urlrar">urlrar</a><br /><img src="http://app.qpic.cn/mblogpic/601eaf76bf09d4d8e484/2000" alt="preview" title="" /></p>

</section>

<section class="slide">
<h2>代码目录，创建响应空文件</h2>

<pre><code>├─┬ lib/
│  └── urllib.js
├─┬ test/
│  ├─┬ support/
│  │  └── http.js (非常方便地测试 http 请求)
│  ├── app.test.js
│  ├── mocha.opts
│  └── urllib.test.js
├── app.js
├── index.html
├── Makefile
├── package.json
└── RERAME.md
</code></pre>

</section>

<section class="slide">
<h2>Makefile</h2>

<pre><code>SRC = $(shell find lib -type f -name "*.js")
TESTS = test/*.js
TESTTIMEOUT = 5000
REPORTER = spec

test:
  @NODE_ENV=test ./node_modules/.bin/mocha \
    --reporter $(REPORTER) --timeout $(TESTTIMEOUT) $(TESTS)

.PHONY: test
</code></pre>

<h3>运行测试</h3>

<pre><code>$ make test
</code></pre>

</section>

<section class="slide">
<h2>mocha.opts</h2>

<h3>自定义mocha更多参数，例如自动引用一些测试依赖的模块</h3>

<pre><code>--require node_modules/should
--require test/support/http.js
</code></pre>

</section>

<section class="slide">
<h2>方便地进行 http 测试</h2>

<p><code>test/support/http.js</code></p>

<pre><code>app.request()
.get('/foo')
.set('x-userid', 'mk2')
.end(function(res) {
  res.should.be.ok;
  res.statusCode.should.equal(200);
  res.should.status(200);
  res.body.should.be.an.instanceof(Buffer);
  res.headers.should.be.a('object');
  res.should.have.header('X-Power-By', 'Nodejs');
  res.should.have.not.header('Set-Cookie');
});
</code></pre>

</section>

<section class="slide">
<h2>确定需求和应用功能</h2>

<h3>需求</h3>

<ul>
<li>将一个短网址 <a href='http://t.cn/StVkqS'>http://t.cn/StVkqS</a> 还原得到最原始网址 <a href='http://nodejs.org/community/'>http://nodejs.org/community/</a></li>
<li>有一个应用主页面</li>
<li>提供API，并支持浏览器能直接调用</li>
</ul>

<h3>应用功能</h3>

<ul>
<li>短网址还原应用</li>
<li>主页面显示介绍和表单，用户可以输入短网址，提交后显示还原结果</li>
<li>支持JSONP的短还原API</li>
</ul>

</section>

<section class="slide">
<h2>行为驱动开发: 实现 “主页面显示介绍和表单”</h2>

<p>直接写测试吧：<code>test/app.test.js</code> </p>

<pre><code>var app = require('../app');

describe('urlrar app', function() {
  before(function(done) {
    app.listen(0, done);
  });
</code></pre>

</section>

<section class="slide">
<h2>将需求变成测试用例</h2>

<pre><code>  it('GET / should show the title, a form and a text input', function(done) {
    app.request().get('/').end(function(res) {
      res.should.status(200);
      res.should.header('X-Power-By', 'Nodejs');
      var body = res.body.toString();
      // 主页面显示介绍和表单
      body.should.include('&lttitle&gtShorten URL Expand&lt/title&gt');
      body.should.include('&ltform');
      body.should.include('&lt/form&gt');
      body.should.include('&ltinput');
      done();
    });
  });
});
</code></pre>

</section>

<section class="slide">
<h2>疯了吧？！直接运行测试</h2>

<pre><code>$ make test
</code></pre>

<p><img src="http://ww4.sinaimg.cn/large/6cfc7910jw1doiqgenjt8j.jpg" alt="first test error" title="" /></p>

</section>

<section class="slide">
<h2>实现app.js</h2>

<pre><code>var http = require('http');
var parse = require('url').parse;
var fs = require('fs');

var indexHtml = fs.readFileSync('./index.html');

var app = http.createServer(function(req, res) {
  res.setHeader('X-Power-By', 'Nodejs');
  var info = parse(req.url, true);
  if (info.pathname === '/') {
    res.setHeader('Content-Type', 'text/html');
    res.end(indexHtml);
  } 
});

module.exports = app;
</code></pre>

</section>

<section class="slide">
<h2>再次运行测试</h2>

<pre><code>$ make test
</code></pre>

<p><img src="http://ww3.sinaimg.cn/large/6cfc7910jw1doiqk4qnvtj.jpg" alt="index page run success" title="" /></p>

</section>

<section class="slide">
<h2>将应用API和404页面完成</h2>

<pre><code>  it('GET /api should have an api', function(done) {
    app.request().get('/api').end(function(res) {
      res.should.status(200);
      res.should.header('X-Power-By', 'Nodejs');
      done();
    });
  });
  it('GET /other should not found the page', function(done) {
    app.request().get('/noexists').end(function(res) {
      res.should.status(404);
      res.should.header('X-Power-By', 'Nodejs');
      res.body.toString().should.equal('Page Not Found!');
      done();
    });
  });
</code></pre>

<p><img src="http://ww4.sinaimg.cn/large/6cfc7910jw1doiqorpn1zj.jpg" alt="3 more tests" title="" /></p>

</section>

<section class="slide">
<h2>实现还原功能</h2>

<h3><code>lib/urllib.js</code> 模块来处理</h3>

<p>使用方式将大致想象为如下：</p>

<pre><code>var urllib = require('./lib/urllib');
urllib.expand(shortenURL, function(err, longURL, redirectCount) {
  // go on...
});
</code></pre>

</section>

<section class="slide">
<h2>urllib.test.js</h2>

<h3>Test Cases</h3>

<pre><code>var mapping = [ 
  [ '<a href='http://www.baidu.com/'>http://www.baidu.com/</a>', '<a href='http://www.baidu.com/'>http://www.baidu.com/</a>' ],
  [ '<a href='http://t.cn/StVkqS'>http://t.cn/StVkqS</a>', '<a href='http://nodejs.org/community/'>http://nodejs.org/community/</a>' ],
  [ '<a href='http://url.cn/48JGfK'>http://url.cn/48JGfK</a>', '<a href='http://baike.baidu.com/view/6341048.htm'>http://baike.baidu.com/view/6341048.htm</a>' ],
  [ '<a href='http://t.cn/aK1IFu'>http://t.cn/aK1IFu</a>', '<a href='http://v.youku.com/v_show/id_XMjc2MjY1NjEy.html'>http://v.youku.com/v_show/id_XMjc2MjY1NjEy.html</a>' ],
   // 2 times redirect
  [ '<a href='http://url.cn/3OMI3O'>http://url.cn/3OMI3O</a>', '<a href='http://v.youku.com/v_show/id_XMjc2MjY1NjEy.html'>http://v.youku.com/v_show/id_XMjc2MjY1NjEy.html</a>', 2 ],
  [ '<a href='http://luo.bo/17221/'>http://luo.bo/17221/</a>', '<a href='http://luo.bo/17221/'>http://luo.bo/17221/</a>' ],
  [ '<a href='http://t.itc.cn/LLHD6'>http://t.itc.cn/LLHD6</a>', '<a href='http://app.chrome.csdn.net/work_detail.php?id=57'>http://app.chrome.csdn.net/work_detail.php?id=57</a>' ],
];
</code></pre>

</section>

<section class="slide">
<h2>正常使用方式测试</h2>

<pre><code>var desc = 'should expand ' + mapping.length + ' shorten urls success';
it(desc, function(done) {
  var counter = 0;
  mapping.forEach(function(map) {
    urllib.expand(map[0], function(err, longurl, redirectCounter) {
      should.not.exist(err);
      map[1].should.equal(longurl);
      if (map[2]) {
        redirectCounter.should.equal(map[2]);
      }
      if (++counter === mapping.length) {
        done();
      }
    })
  })
})
</code></pre>

</section>

<section class="slide">
<h2>urllib.js#expand()实现</h2>

<pre><code>exports.expand = function(url, callback) {
  var info = parse(url);
  var options = {
    hostname: info.hostname,
    path: info.path,
    method: 'HEAD'
  };
  var request = info.protocol === 'https:' ? 
    https.request : http.request;
  var req = request(options);
</code></pre>

</section>

<section class="slide">
<h2>urllib.js#expand()实现2</h2>

<pre><code>  if (callback.__redirectCounter === undefined) {
    callback.__redirectCounter = 0;
  }
  req.on('response', function(res) {
    if (res.statusCode === 301 || res.statusCode === 302) {
      var location = res.headers['location'];
      if (++callback.__redirectCounter > exports.maxRedirect) {
        return callback(null, location, callback.__redirectCounter);
      }
      return exports.expand(location, callback);
    }
    callback(null, url, callback.__redirectCounter);
  });
  req.end();
};

exports.maxRedirect = 5;
</code></pre>

</section>

<section class="slide">
<h2>非法输入参数情况</h2>

<pre><code>it('should return empty string when shorturl set wrong', function(done) {
  urllib.expand('', function(err, longurl) {
    should.not.exist(err);
    should.not.exist(longurl);
    done();
  })
});

it('should throw error when pass null', function() {
  try {
    urllib.expand();
  } catch(e) {
    e.name.should.equal('TypeError');
    e.message.should.equal('undefined is not a function');
  }
  (function() {
    urllib.expand();
  }).should.throw();
  (function() {
    urllib.expand(null);
  }).should.throw();
});
</code></pre>

</section>

<section class="slide">
<h2>服务器异常怎么办？</h2>

<pre><code>  describe('#expand() server Error', function() {
    var app = http.createServer(function(req, res) {
      res.destroy();
    });

    before(function(done) {
      app.listen(0, done);
    });

    it('should return error when server error', function(done) {
      var url = '<a href='http://localhost'>http://localhost</a>:' + app.address().port + '/foo';
      urllib.expand(url, function(err, longurl) {
        should.exist(err);
        err.should.be.an.instanceof(Error);
        err.message.should.equal('connect ECONNREFUSED');
        done();
      });
    });
  });
</code></pre>

</section>

<section class="slide">
<h2>处理异常</h2>

<pre><code>  var req = request(options);
  req.on('error', function(err) {
    callback(err, url, callback.__redirectCounter);
  });
  req.on('response', function(res) {
    // ...
</code></pre>

</section>

<section class="slide">
<h2>实现 API 功能</h2>

<h3>测试先行</h3>

<pre><code>it('GET /api?u=<a href='http://t.cn/StVkqS'>http://t.cn/StVkqS</a> should worked', function(done) {
  app.request()
  .get('/api?u=<a href='http://t.cn/StVkqS'>http://t.cn/StVkqS</a>')
  .end(function(res) {
    res.should.status(200);
    res.body.toString().should.equal('<a href='http://nodejs.org/community/'>http://nodejs.org/community/</a>');
    done();
  });
});
</code></pre>

</section>

<section class="slide">
<h2>实现代码</h2>

<pre><code>var app = http.createServer(function(req, res) {
  // ...

  if (info.pathname === '/api') {
    var query = info.query;
    if (!query.u) {
      return res.end('`u` argument required.')
    }
    urllib.expand(query.u, function(err, longurl) {
      if (query.cb) {
        longurl = query.cb + '(' + JSON.stringify(longurl) + ')';
      }
      res.end(longurl);
    });
    return;
  }

  // ...
});
</code></pre>

</section>

<section class="slide">
<h2>绿灯通行</h2>

<pre><code>$ make test
</code></pre>

<p><img src="http://app.qpic.cn/mblogpic/de91b739e009ccf50438/2000" alt="test all pass" title="" /></p>

</section>

<section class="slide">
<h2>更多好的示例</h2>

<ul>
<li><a href="https://github.com/visionmedia/express/tree/master/test">Express</a></li>
<li><a href="https://github.com/senchalabs/connect/tree/master/test">Connect</a></li>
<li><a href="https://github.com/visionmedia/superagent/tree/master/test/node">SuperAgent</a></li>
<li><a href="https://github.com/LearnBoost/websocket.io/tree/master/test">WebSocket.io</a></li>
<li><a href="https://github.com/visionmedia/mocha/tree/master/test">Mocha</a></li>
</ul>

</section>

<section class="slide">
<h1>QA === 知乎者也</h1></section>


<p class="deck-status">
  <span class="deck-status-current"></span>
  /
  <span class="deck-status-total"></span>
</p>

<form action="." method="get" class="goto-form">
  <label for="goto-slide">Go to slide:</label>
  <input type="text" name="slidenum" id="goto-slide" list="goto-datalist">
  <datalist id="goto-datalist"></datalist>
  <input type="submit" value="Go">
</form>

<a href="." title="Permalink to this slide" class="deck-permalink">#</a>

<script src="/js/jquery-1.7.min.js"></script>
<script src="/js/prettify.js"></script>

<!-- Deck Core and extensions -->
<script src="/js/deck.js/core/deck.core.js"></script>
<script src="/js/deck.js/extensions/hash/deck.hash.js"></script>
<script src="/js/deck.js/extensions/menu/deck.menu.js"></script>
<script src="/js/deck.js/extensions/goto/deck.goto.js"></script>
<script src="/js/deck.js/extensions/status/deck.status.js"></script>
<script src="/js/deck.js/extensions/navigation/deck.navigation.js"></script>

<!-- Specific to this page -->
<script>
$(function() {
  // Deck initialization
  $.deck('.slide');
  $('pre code').parent().addClass('prettyprint');
  prettyPrint();
});
</script>

</body>
</html>
